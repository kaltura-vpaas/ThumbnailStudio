{"version":3,"sources":["components/features/featureList/modules/constants.ts","components/features/featureList/modules/reducers.ts","components/features/featureList/modules/index.ts","components/features/featureStack/modules/constants.ts","components/features/featureStack/modules/reducers.ts","components/features/featureStack/modules/index.ts","components/features/featureProps/modules/constants.ts","components/features/featureProps/modules/reducers.ts","components/features/featureProps/modules/index.ts","components/appConfig/modules/constants.ts","components/appConfig/modules/reducers.ts","components/appConfig/modules/index.ts","components/instances/instanceList/modules/constants.ts","components/instances/instanceList/modules/reducers.ts","components/instances/instanceList/modules/index.ts","components/instances/instanceProps/modules/constants.ts","components/instances/instanceProps/modules/reducers.ts","components/instances/instanceProps/modules/index.ts","store/rootReducer.ts","store/index.ts","components/uiComponents/item/index.tsx","components/features/featureList/FeatureList.tsx","components/features/featureList/modules/selectors.ts","components/instances/instanceList/modules/selectors.ts","components/features/featureStack/modules/selectors.ts","components/features/featureProps/modules/selectors.ts","components/uiComponents/textInput/index.tsx","components/uiComponents/colorPicker/index.tsx","components/uiComponents/dropDown/index.tsx","components/uiComponents/checkBox/index.tsx","utils/index.ts","components/features/featureStack/modules/actions.ts","components/features/featureProps/modules/actions.ts","components/features/featureList/modules/actions.ts","components/features/featureList/index.ts","components/uiComponents/property/index.tsx","components/features/featureProps/FeatureProps.tsx","components/features/featureProps/index.ts","components/features/featureButtons/FeatureButtons.tsx","components/features/featureButtons/modules/selectors.ts","components/features/featureButtons/index.ts","components/features/featureStack/FeatureStack.tsx","components/features/featureStack/index.ts","components/features/index.tsx","components/preview/Preview.tsx","components/instances/instanceProps/modules/selectors.ts","components/appConfig/modules/selectors.ts","components/preview/modules/selectors.ts","components/preview/index.ts","components/appConfig/AppConfig.tsx","components/appConfig/index.ts","components/appConfig/modules/actions.ts","components/instances/instanceList/InstanceList.tsx","components/instances/instanceProps/modules/actions.ts","components/instances/instanceList/modules/actions.ts","components/instances/instanceList/index.ts","components/instances/instanceButtons/InstanceButtons.tsx","components/instances/instanceButtons/index.ts","components/instances/instanceProps/InstanceProps.tsx","components/instances/instanceProps/index.ts","components/instances/index.tsx","App.tsx","utils/serviceWorker.ts","index.tsx"],"names":["key","featureconf","SET_LIST","FETCH_LIST_REQUEST","FETCH_LIST_SUCCESS","FETCH_LIST_FAIL","SET_SELECTED_FEATURE","CLEAR_SELECTED_FEATURE","initialState","isFetching","error","featureList","selectedFeature","featurestate","state","action","type","constants","payload","featuredex","reducer","stackstate","ADD_FEATURE","REMOVE_FEATURE","stackreduce","filter","feature","uniqId","stackdex","featprops","SET_FEATURE_PROPERTY","CLEAR_FEATURE_PROPERTY","CHANGE_FEATURE_PROPERTY","featstate","props","omit","featureProps","featdex","constExport","SET_KS","SET_PARTNER_ID","ks","partnerId","redstate","reducerconf","instancestate","ADD_INSTANCE","REMOVE_INSTANCE","SET_SELECTED_INSTANCE","CLEAR_SELECTED_INSTANCE","selectedInstance","instanceList","instance","id","instate","propstate","SET_INSTANCE_PROPERTY","CLEAR_INSTANCE_PROPERTY","CHANGE_INSTANCE_PROPERTY","propred","instanceProps","propdex","combineReducers","appConfig","features","featuresStack","instances","middleware","thunk","composedEnhancers","compose","applyMiddleware","store","createStore","rootReducer","FeatureItem","className","selected","onClick","label","FeatureList","setSelected","f","setSelectedFeature","this","fetchFeatureList","list","disabled","map","Component","getState","getFeatures","createSelector","s","getSelectedFeature","getInstances","getSelectedInstance","getSelectedInstanceFeatures","get","getSelectedFeatureIndex","findIndex","el","getFeatureProps","sf","TextInput","onChange","e","target","value","required","inputProps","step","ColorPicker","isValidHexColor","replace","prepareValue","isHexaColor","DropDown","options","isArray","i","CheckBox","console","log","checked","generateRandom","Array","Math","random","toString","join","Date","now","color","test","sNum","length","isNaN","parseInt","clearSelectedFeature","addFeature","dispatch","getSelectedFeatureList","instanceId","removeFeature","clearFeatureProperty","setList","mapDispatchToProps","a","require","getSelectedFeatureStack","clearFeatureStackSelectedFeature","connect","Property","handleOnChange","description","PropertyComponent","getPropertyComponent","href","title","FeatureProps","p","changeFeatureProperty","propId","getFeaturePropState","FeatureButtons","handleMove","modifier","event","selectedFeatureIndex","changeFeaturePosition","selectedFeatureStack","selectedFeatureList","isMoveDownEnabled","isMoveUpEnabled","index","oldIndex","newIndex","newList","forEach","getFeatureListSelected","FeatureStack","merge","setFeatureProperty","cleaFeatureListSelected","Features","responseTypes","json","images","Preview","url","longUrl","blob","errorText","fetchImageData","fetch","then","response","setState","onError","onLoad","renderPreviewImage","objectURL","URL","createObjectURL","src","alt","setErrorText","msg","renderErrorMessage","reader","FileReader","onload","data","objResponse","attempt","JSON","parse","isError","readAsText","prevProps","prevState","responseType","preview","includes","nextProps","getInstanceProps","si","getInstanceSourceAction","ip","getKs","getPartnerId","getAliasOrName","property","alias","name","getValue","defaultValue","isEmpty","getServiceUrl","longAddPropertyToUrl","makeLongUrl","featureStackList","featurePropsState","getInstancePropsState","serviceUrl","fs","fp","iteration","sourceAction","entryId","filteredFeatures","addPropertyToUrl","makePreviewUrl","AppConfig","setKS","setPartnerId","isKsEmpty","InstanceList","setSelectedInstance","changeInsnanceProperty","getInstancePropState","setInstanceProperty","addInstance","removeInstance","newInstance","clearInstanceProperty","InstanceButtons","InstanceProps","handleInstanceEntryIdChange","handleInstanceSourceActionChange","sourceActionList","find","renderSourceActionSelect","renderSourceActionProps","changeInstanceSourceActionProps","currentSourceAction","Instances","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b9aa9a0.chunk.js","sourcesContent":["export const key = \"features\";\n\n const featureconf = {\n  SET_LIST: `${key}.SET_LIST`,\n\n  FETCH_LIST_REQUEST: `${key}.FETCH_LIST_REQUEST`,\n  FETCH_LIST_SUCCESS: `${key}.FETCH_LIST_SUCCESS`,\n  FETCH_LIST_FAIL: `${key}.FETCH_LIST_FAIL`,\n\n  SET_SELECTED_FEATURE: `${key}.SET_SELECTED_FEATURE`,\n  CLEAR_SELECTED_FEATURE: `${key}.CLEAR_SELECTED_FEATURE`\n};\n\nexport default featureconf;","import constants from \"./constants\";\nimport Feature from \"../../modules/models\";\n\nexport interface State {\n  featureList: Feature[];\n  isFetching: boolean;\n  error: object | null;\n  selectedFeature: Feature | null;\n}\n\nconst initialState: State = {\n  isFetching: false,\n  error: null,\n  featureList: [],\n  selectedFeature: null\n};\n\nconst featurestate = (state: State = initialState, action: any) => {\n  switch (action.type) {\n    case constants.SET_LIST:\n      return {\n        ...state,\n        featureList: action.payload\n      };\n    case constants.FETCH_LIST_REQUEST:\n      return {\n        ...state,\n        isFetching: true\n      };\n    case constants.FETCH_LIST_SUCCESS:\n      return {\n        ...state,\n        isFetching: false\n      };\n    case constants.FETCH_LIST_FAIL:\n      return {\n        ...state,\n        isFetching: false,\n        error: action.payload\n      };\n    case constants.SET_SELECTED_FEATURE:\n      return {\n        ...state,\n        selectedFeature: action.payload\n      };\n    case constants.CLEAR_SELECTED_FEATURE:\n      return {\n        ...state,\n        selectedFeature: null\n      };\n    default:\n      return state;\n  }\n};\n\nexport default featurestate;","import reducer from \"./reducers\";\nimport { key } from \"./constants\";\n\nconst featuredex = { [key]: reducer };\nexport default featuredex;\n","export const key = \"featureStack\";\n\nconst stackstate =  {\n  SET_LIST: `${key}.SET_LIST`,\n\n  ADD_FEATURE: `${key}.ADD_FEATURE`,\n  REMOVE_FEATURE: `${key}.REMOVE_FEATURE`,\n\n  SET_SELECTED_FEATURE: `${key}.SET_SELECTED_FEATURE`,\n  CLEAR_SELECTED_FEATURE: `${key}.CLEAR_SELECTED_FEATURE`\n};\n\nexport default stackstate;","import constants from \"./constants\";\nimport { FeatureStack } from \"../../modules/models\";\n\nexport interface State {\n  featureList: FeatureStack[];\n  selectedFeature: FeatureStack | null;\n}\n\nconst initialState: State = {\n  selectedFeature: null,\n  featureList: []\n};\n\nconst stackreduce =  (state: State = initialState, action: any) => {\n  switch (action.type) {\n    case constants.SET_LIST:\n      return {\n        ...state,\n        featureList: action.payload\n      };\n    case constants.SET_SELECTED_FEATURE:\n      return {\n        ...state,\n        selectedFeature: action.payload\n      };\n    case constants.CLEAR_SELECTED_FEATURE:\n      return {\n        ...state,\n        selectedFeature: null\n      };\n    case constants.ADD_FEATURE:\n      return {\n        ...state,\n        featureList: [...state.featureList, action.payload]\n      };\n    case constants.REMOVE_FEATURE:\n      return {\n        ...state,\n        featureList: state.featureList.filter(\n          (feature: FeatureStack) => feature.uniqId !== action.payload.uniqId\n        )\n      };\n    default:\n      return state;\n  }\n};\n\nexport default stackreduce;","import reducer from \"./reducers\";\nimport { key } from \"./constants\";\n\nconst stackdex =  { [key]: reducer };\nexport default stackdex;","export const key = \"featureProps\";\n\nconst featprops =  {\n  SET_FEATURE_PROPERTY: `${key}.SET_FEATURE_PROPERTY`,\n  CLEAR_FEATURE_PROPERTY: `${key}.CLEAR_FEATURE_PROPERTY`,\n  CHANGE_FEATURE_PROPERTY: `${key}.CHANGE_FEATURE_PROPERTY`\n};\n\nexport default featprops;","import omit from \"lodash/omit\";\nimport constants from \"./constants\";\n\n// export interface State {\n// featureProps: any;\n// }\n\nconst initialState = {};\n\nconst featstate = (state = initialState, action: any) => {\n  switch (action.type) {\n    case constants.SET_FEATURE_PROPERTY:\n      return {\n        ...state,\n        [action.payload.uniqId]: action.payload.props\n      };\n    case constants.CLEAR_FEATURE_PROPERTY:\n      return omit(state, action.payload.uniqId);\n    case constants.CHANGE_FEATURE_PROPERTY:\n      return {\n        ...state,\n        [action.payload.uniqId]: action.payload.featureProps\n      };\n    default:\n      return state;\n  }\n};\n\nexport default featstate;","import reducer from \"./reducers\";\nimport { key } from \"./constants\";\n\nconst featdex =  { [key]: reducer };\nexport default featdex;\n","export const key = \"appConfig\";\n\nconst constExport =\n{\n  SET_KS: `${key}.SET_KS`,\n  SET_PARTNER_ID: `${key}.SET_PARTNER_ID`\n};\nexport default constExport;\n","import constants from \"./constants\";\n\n// export interface State {\n// featureProps: any;\n// }\n\nconst initialState = {\n  ks: \"\",\n  partnerId: \"\"\n};\n\n const redstate = (state = initialState, action: any) => {\n  switch (action.type) {\n    case constants.SET_KS:\n      return {\n        ...state,\n        ks: action.payload\n      };\n    case constants.SET_PARTNER_ID:\n      return {\n        ...state,\n        partnerId: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default redstate;","import reducer from \"./reducers\";\nimport { key } from \"./constants\";\n\nconst reducerconf =  { [key]: reducer };\nexport default reducerconf;\n","export const key = \"instances\";\n\nconst instancestate =  {\n  ADD_INSTANCE: `${key}.ADD_INSTANCE`,\n  REMOVE_INSTANCE: `${key}.REMOVE_INSTANCE`,\n\n  SET_SELECTED_INSTANCE: `${key}.SET_SELECTED_INSTANCE`,\n  CLEAR_SELECTED_INSTANCE: `${key}.CLEAR_SELECTED_INSTANCE`\n};\n\nexport default instancestate;","import constants from \"./constants\";\nimport Instance from \"./models\";\n\nexport interface State {\n  instanceList: Instance[];\n  selectedInstance: Instance | null;\n}\n\nconst initialState: State = {\n  selectedInstance: null,\n  instanceList: []\n};\n\nconst redstate = (state: State = initialState, action: any) => {\n  switch (action.type) {\n    case constants.SET_SELECTED_INSTANCE:\n      return {\n        ...state,\n        selectedInstance: action.payload\n      };\n    case constants.CLEAR_SELECTED_INSTANCE:\n      return {\n        ...state,\n        selectedInstance: null\n      };\n    case constants.ADD_INSTANCE:\n      return {\n        ...state,\n        instanceList: [...state.instanceList, action.payload]\n      };\n    case constants.REMOVE_INSTANCE:\n      return {\n        ...state,\n        instanceList: state.instanceList.filter(\n          (instance: Instance) => instance.id !== action.payload.id\n        )\n      };\n    default:\n      return state;\n  }\n};\n\nexport default redstate;","import reducer from \"./reducers\";\nimport { key } from \"./constants\";\n\nconst instate = { [key]: reducer };\nexport default instate;","export const key = \"instanceProps\";\n\nconst propstate = {\n  SET_INSTANCE_PROPERTY: `${key}.SET_INSTANCE_PROPERTY`,\n  CLEAR_INSTANCE_PROPERTY: `${key}.CLEAR_INSTANCE_PROPERTY`,\n  CHANGE_INSTANCE_PROPERTY: `${key}.CHANGE_INSTANCE_PROPERTY`\n};\n\nexport default propstate;","import omit from \"lodash/omit\";\nimport constants from \"./constants\";\n\nconst initialState = {};\n\nconst propred = (state = initialState, action: any) => {\n  switch (action.type) {\n    case constants.SET_INSTANCE_PROPERTY:\n      return {\n        ...state,\n        [action.payload.id]: action.payload.props\n      };\n    case constants.CLEAR_INSTANCE_PROPERTY:\n      return omit(state, action.payload.id);\n    case constants.CHANGE_INSTANCE_PROPERTY:\n      return {\n        ...state,\n        [action.payload.id]: action.payload.instanceProps\n      };\n    default:\n      return state;\n  }\n};\n\nexport default propred;","import reducer from \"./reducers\";\nimport { key } from \"./constants\";\n\nconst propdex =  { [key]: reducer };\nexport default propdex;","import { combineReducers } from \"redux\";\n\nimport features from \"../components/features/featureList/modules\";\nimport featuresStack from \"../components/features/featureStack/modules\";\nimport featureProps from \"../components/features/featureProps/modules\";\nimport appConfig from \"../components/appConfig/modules\";\nimport instances from \"../components/instances/instanceList/modules\";\nimport instanceProps from \"../components/instances/instanceProps/modules\";\n\nexport default combineReducers({\n  ...appConfig,\n  ...features,\n  ...featuresStack,\n  ...featureProps,\n  ...instances,\n  ...instanceProps\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./rootReducer\";\n\nconst initialState = {};\nconst enhancers = [];\nconst middleware = [thunk];\n\ndeclare const process: {\n  env: {\n    NODE_ENV: string;\n  };\n};\n\nif (process.env.NODE_ENV === \"development\") {\n  const devToolsExtension = (window as any).__REDUX_DEVTOOLS_EXTENSION__;\n\n  if (typeof devToolsExtension === \"function\") {\n    enhancers.push(devToolsExtension());\n  }\n}\n\nconst composedEnhancers = compose(\n  applyMiddleware(...middleware),\n  ...enhancers\n);\n\nconst store = createStore(rootReducer, initialState, composedEnhancers);\n\nexport default store;\n","import React from \"react\";\nimport \"./styles.scss\";\n\ninterface Props {\n  onClick: any;\n  label: string;\n  selected: boolean;\n}\n\nconst FeatureItem = (props: Props) => (\n  <div\n    className={`feature-item${props.selected ? \" selected\" : \"\"}`}\n    onClick={props.onClick}\n  >\n    <span className=\"feature-label\">{props.label}</span>\n  </div>\n);\nexport default FeatureItem;\n","import React, { Component } from \"react\";\nimport Feature from \"../modules/models\";\nimport FeatureItem from \"../../uiComponents/item\";\nimport \"./styles.scss\";\n\ninterface Props {\n  list: Feature[];\n  selectedFeature: any;\n  setSelectedFeature(f: Feature): void;\n  fetchFeatureList(): void;\n  disabled: boolean;\n}\n\nclass FeatureList extends Component<Props> {\n  componentDidMount() {\n    this.props.fetchFeatureList();\n  }\n  setSelected = (f: Feature) => () => {\n    this.props.setSelectedFeature(f);\n  };\n  render() {\n    const { list, selectedFeature, disabled } = this.props;\n    return (\n      <div className=\"feature-list\">\n        {!disabled &&\n          list.map((f: Feature) => (\n            <FeatureItem\n              key={f.id}\n              onClick={this.setSelected(f)}\n              label={f.label}\n              selected={selectedFeature ? selectedFeature.id === f.id : false}\n            />\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default FeatureList;\n","import { createSelector } from \"reselect\";\nimport { key } from \"./constants\";\n\nconst getState = (state: any) => state[key];\n\nexport const getFeatures = createSelector(\n  getState,\n  s => s.featureList\n);\n\nexport const getSelectedFeature = createSelector(\n  getState,\n  s => s.selectedFeature\n);\n","import { createSelector } from \"reselect\";\nimport { key } from \"./constants\";\n\nexport const getState = (state: any) => state[key];\n\nexport const getInstances = createSelector(\n  getState,\n  s => s.instanceList\n);\n\nexport const getSelectedInstance = createSelector(\n  getState,\n  s => s.selectedInstance\n);\n","import { createSelector } from \"reselect\";\nimport filter from \"lodash/filter\";\nimport get from \"lodash/get\";\nimport findIndex from \"lodash/findIndex\";\nimport { key } from \"./constants\";\nimport { getSelectedInstance } from \"../../../instances/instanceList/modules/selectors\";\nimport Instance from \"../../../instances/instanceList/modules/models\";\nimport { FeatureStack } from \"../../modules/models\";\n\nexport const getState = (state: any) => state[key];\n\nexport const getFeatures = createSelector(\n  getState,\n  s => s.featureList\n);\n\nexport const getSelectedInstanceFeatures = createSelector(\n  [getFeatures, getSelectedInstance],\n  (list: [], instance: Instance) =>\n    filter(list, [\"instanceId\", get(instance, \"id\")])\n);\n\nexport const getSelectedFeature = createSelector(\n  getState,\n  s => s.selectedFeature\n);\n\nexport const getSelectedFeatureIndex = createSelector(\n  [getFeatures, getSelectedFeature],\n  (list: [], selected: FeatureStack) => {\n    return findIndex(\n      list,\n      (el: FeatureStack) => el.uniqId === get(selected, \"uniqId\")\n    );\n  }\n);\n","import get from \"lodash/get\";\nimport { createSelector } from \"reselect\";\nimport { key } from \"./constants\";\nimport { getSelectedFeature } from \"../../featureStack/modules/selectors\";\n\nexport const getState = (state: any) => state[key];\n\nexport const getFeatureProps = createSelector(\n  [getState, getSelectedFeature],\n  (s, sf) => {\n    return s[get(sf, \"uniqId\")] || [];\n  }\n);\n","import React, { Component } from \"react\";\nimport \"./styles.scss\";\n\ninterface Props {\n  value: string;\n  required?: boolean;\n  onChange: any;\n  type: string;\n}\n\nclass TextInput extends Component<Props> {\n  onChange = (e: any) => {\n    this.props.onChange(e.target.value);\n  };\n  render() {\n    const { value, required, type } = this.props;\n    const inputProps: any = {\n      type: type === \"string\" ? \"text\" : \"number\"\n    };\n    if (type === \"float\") {\n      inputProps.step = 0.01;\n    }\n    return (\n      <input\n        value={value}\n        onChange={this.onChange}\n        required={required}\n        className={`text-input${required && !value ? \" error\" : \"\"}`}\n        {...inputProps}\n      />\n    );\n  }\n}\nexport default TextInput;\n","import React, { Component } from \"react\";\nimport replace from \"lodash/replace\";\nimport { isValidHexColor, isHexaColor } from \"../../../utils\";\n\ninterface Props {\n  value: string;\n  required: boolean;\n  onChange: any;\n}\n\nclass ColorPicker extends Component<Props> {\n  onChange = (e: any) => {\n    const value = e.target.value;\n    if (isValidHexColor(value)) {\n      this.props.onChange(replace(value, \"#\", \"\"));\n    } else {\n      this.props.onChange(value);\n    }\n  };\n  prepareValue = (value: any) => {\n    if (isHexaColor(value)) {\n      return `#${value}`;\n    }\n    return value;\n  };\n  render() {\n    const { value, required } = this.props;\n    return (\n      <input\n        type=\"color\"\n        value={this.prepareValue(value)}\n        onChange={this.onChange}\n        required={required}\n        className=\"color-picker\"\n      />\n    );\n  }\n}\nexport default ColorPicker;\n","import React, { Component } from \"react\";\nimport isArray from \"lodash/isArray\";\nimport \"./styles.scss\";\n\ninterface Props {\n  value: string;\n  required: boolean;\n  onChange: any;\n  options: string[];\n}\n\nclass DropDown extends Component<Props> {\n  onChange = (e: any) => {\n    this.props.onChange(e.target.value);\n  };\n  render() {\n    const { value, required, options } = this.props;\n    if (!isArray(options)) {\n      return null;\n    }\n    return (\n      <select\n        onChange={this.onChange}\n        className={`dropdown${required && !value ? \" error\" : \"\"}`}\n        required={required}\n        value={value}\n      >\n        {options.map((el, i) => (\n          <option key={i} value={el} label={el} />\n        ))}\n      </select>\n    );\n  }\n}\nexport default DropDown;\n","import React, { Component } from \"react\";\nimport \"./styles.scss\";\n\ninterface Props {\n  value: boolean;\n  required: boolean;\n  onChange: any;\n  options: string[];\n}\n\nclass CheckBox extends Component<Props> {\n  onChange = (e: any) => {\n    console.log(\"here\");\n    console.log(e.target);\n    this.props.onChange(e.target.checked);\n  };\n  render() {\n    const { value, required } = this.props;\n    return (\n      <input\n        checked={value}\n        onChange={this.onChange}\n        required={required}\n        className={`checkbox${required && !value ? \" error\" : \"\"}`}\n        type=\"checkbox\"\n      />\n    );\n  }\n}\nexport default CheckBox;\n","import TextInput from \"../components/uiComponents/textInput\";\nimport ColorPicker from \"../components/uiComponents/colorPicker\";\nimport DropDown from \"../components/uiComponents/dropDown\";\nimport CheckBox from \"../components/uiComponents/checkBox\";\n\nexport const getPropertyComponent = (type: string) => {\n  switch (type) {\n    case \"string\":\n    case \"float\":\n    case \"int\":\n      return TextInput;\n    case \"bool\":\n      return CheckBox;\n    case \"color\":\n      return ColorPicker;\n    case \"select\":\n      return DropDown;\n    default:\n      return null;\n  }\n};\n\nexport const generateRandom = () =>\n  `${[...Array(10)]\n    .map(() => (~~(Math.random() * 36)).toString(36))\n    .join(\"\")}-${Date.now()}`;\n\nexport const isValidHexColor = (color: any) => {\n  return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(color);\n};\n\nexport const isHexaColor = (sNum: any) => {\n  return (\n    typeof sNum === \"string\" && sNum.length === 6 && !isNaN(parseInt(sNum, 16))\n  );\n};\n","import get from \"lodash/get\";\nimport { Dispatch } from \"redux\";\nimport constants from \"./constants\";\nimport { FeatureStack } from \"../../modules/models\";\nimport {\n  setFeatureProperty,\n  clearFeatureProperty\n} from \"../../featureProps/modules/actions\";\nimport { generateRandom } from \"../../../../utils\";\n\nimport { getSelectedFeature as getSelectedFeatureList } from \"../../featureList/modules/selectors\";\nimport { getSelectedInstance } from \"../../../instances/instanceList/modules/selectors\";\nimport { getSelectedFeature, getFeatures } from \"./selectors\";\n\nimport { clearSelectedFeature as cleaFeatureListSelected } from \"../../featureList/modules/actions\";\n\nexport const setList = (list: []) => {\n  return { type: constants.SET_LIST, payload: list };\n};\n\nexport const clearSelectedFeature = () => {\n  return { type: constants.CLEAR_SELECTED_FEATURE };\n};\n\nexport const addFeature = () => (dispatch: Dispatch, getState: any) => {\n  const feature = getSelectedFeatureList(getState());\n  const instanceId = getSelectedInstance(getState());\n  dispatch({\n    type: constants.ADD_FEATURE,\n    payload: {\n      ...feature,\n      uniqId: `${feature.id}-${generateRandom()}`,\n      instanceId: get(instanceId, \"id\")\n    }\n  });\n};\n\nexport const removeFeature = () => (dispatch: Dispatch, getState: any) => {\n  const feature = getSelectedFeature(getState());\n  dispatch(clearFeatureProperty(feature));\n  dispatch(clearSelectedFeature());\n  dispatch({ type: constants.REMOVE_FEATURE, payload: feature });\n};\n\nexport const setSelectedFeature = (feature: FeatureStack) => (\n  dispatch: any,\n  getState: any\n) => {\n  const selected = getSelectedFeature(getState());\n  if (get(selected, \"uniqId\") !== feature.uniqId) {\n    dispatch({ type: constants.SET_SELECTED_FEATURE, payload: feature });\n    dispatch(setFeatureProperty(feature));\n  }\n  if (getSelectedFeatureList(getState())) {\n    dispatch(cleaFeatureListSelected());\n  }\n};\n\nexport const changeFeaturePosition = (oldIndex: number, newIndex: number) => (\n  dispatch: Dispatch,\n  getState: () => void\n) => {\n  const list = getFeatures(getState());\n  const feature = list[oldIndex];\n  let newList: any = [];\n  list.forEach((el: any, index: number) => {\n    if (index === oldIndex) {\n      return;\n    }\n    if (index === newIndex) {\n      return (newList =\n        newIndex > oldIndex\n          ? [...newList, el, feature]\n          : [...newList, feature, el]);\n    }\n    newList = [...newList, el];\n  });\n  dispatch(setList(newList));\n};\n","import merge from \"lodash/merge\";\nimport constants from \"./constants\";\nimport { FeatureStack } from \"../../modules/models\";\nimport { getState as getFeaturePropState } from \"../modules/selectors\";\nimport { getSelectedFeature } from \"../../featureStack/modules/selectors\";\n\nexport const setFeatureProperty = (feature: FeatureStack) => (\n  dispatch: any,\n  getState: any\n) => {\n  const featureProps = getFeaturePropState(getState())[feature.uniqId] || [];\n  dispatch({\n    type: constants.SET_FEATURE_PROPERTY,\n    payload: {\n      props: merge(featureProps, feature.props),\n      uniqId: feature.uniqId\n    }\n  });\n};\n\nexport const clearFeatureProperty = (feature: FeatureStack) => {\n  return { type: constants.CLEAR_FEATURE_PROPERTY, payload: feature };\n};\n\nexport const changeFeatureProperty = (propId: number, value: any) => (\n  dispatch: any,\n  getState: any\n) => {\n  const uniqId = getSelectedFeature(getState()).uniqId;\n  const featureProps = getFeaturePropState(getState())[uniqId].map((p: any) =>\n    p.id === propId ? { ...p, value } : p\n  );\n  dispatch({\n    type: constants.CHANGE_FEATURE_PROPERTY,\n    payload: { uniqId, featureProps }\n  });\n};\n","import get from \"lodash/get\";\nimport { Dispatch } from \"redux\";\nimport constants from \"./constants\";\nimport Feature from \"../../modules/models\";\n\nimport { clearSelectedFeature as clearFeatureStackSelectedFeature } from \"../../featureStack/modules/actions\";\nimport { getSelectedFeature } from \"./selectors\";\nimport { getSelectedFeature as getSelectedFeatureStack } from \"../../featureStack/modules/selectors\";\n\n// export interface FetchFeatureList {\n//   type: constants.FETCH_LIST_REQUEST;\n//   payload: { list: Feature };\n// }\n\nexport const setList = (list: []) => {\n  return { type: constants.SET_LIST, payload: list };\n};\n\nexport const fetchFeatureList = () => async (dispatch: Dispatch) => {\n  dispatch({ type: constants.FETCH_LIST_REQUEST });\n  const list = await require(\"./features.json\"); // eslint-disable-line\n  dispatch({ type: constants.FETCH_LIST_SUCCESS });\n  dispatch(setList(list));\n  // dispatch({ type: constants.FETCH_LIST_FAIL, payload: error }); // placeholder\n};\n\nexport const setSelectedFeature = (feature: Feature) => (\n  dispatch: any,\n  getState: any\n) => {\n  const selected = getSelectedFeature(getState());\n  if (get(selected, \"id\") !== feature.id) {\n    if (getSelectedFeatureStack(getState())) {\n      dispatch(clearFeatureStackSelectedFeature());\n    }\n    dispatch({ type: constants.SET_SELECTED_FEATURE, payload: feature });\n  }\n};\n\nexport const clearSelectedFeature = () => {\n  return { type: constants.CLEAR_SELECTED_FEATURE };\n};\n","import { connect } from \"react-redux\";\nimport FeatureList from \"./FeatureList\";\nimport { State } from \"./modules/reducers\";\nimport { getFeatures, getSelectedFeature } from \"./modules/selectors\";\nimport { getSelectedInstance } from \"../../instances/instanceList/modules/selectors\";\n\nimport { fetchFeatureList, setSelectedFeature } from \"./modules/actions\";\n\nconst mapDispatchToProps = {\n  fetchFeatureList,\n  setSelectedFeature\n};\n\nconst mapStateToProps = (state: State) => ({\n  list: getFeatures(state),\n  selectedFeature: getSelectedFeature(state),\n  disabled: !getSelectedInstance(state)\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FeatureList);\n","import React, { Component } from \"react\";\nimport { getPropertyComponent } from \"../../../utils\";\nimport \"./styles.scss\";\n\ninterface Props {\n  id: number;\n  type: string;\n  defaultValue?: number | string;\n  value?: number | string;\n  label: string;\n  required: boolean;\n  description: string;\n  props: any;\n  onChange(id: any, value: any): void;\n}\n\nclass Property extends Component<Props> {\n  handleOnChange = (value: any) => {\n    const { onChange, id } = this.props;\n    onChange(id, value);\n  };\n  render() {\n    const { value, label, required, props, description } = this.props;\n    const PropertyComponent: any = getPropertyComponent(this.props.type);\n    if (!PropertyComponent) {\n      return null;\n    }\n    return (\n      <div className=\"property\">\n        <span className=\"property-label\">{label}\n          <a href=\"/#\" className=\"tooltip\" title={description}> </a>\n        </span>\n\n        <PropertyComponent\n          value={value}\n          onChange={this.handleOnChange}\n          required={required}\n          type={this.props.type}\n          {...props}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Property;\n","import React, { Component } from \"react\";\nimport Property from \"../../uiComponents/property\";\nimport \"./styles.scss\";\n\ninterface Props {\n  list: [];\n  changeFeatureProperty(id: any, value: any): void;\n}\n\nclass FeatureProps extends Component<Props> {\n  render() {\n    const { list } = this.props;\n    if (list.length < 1) {\n      return null;\n    }\n    return (\n      <div className=\"feature-properties\">\n        {list.map((p: any) => (\n          <div key={p.id}>\n            <Property onChange={this.props.changeFeatureProperty} {...p} />\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default FeatureProps;\n","import { connect } from \"react-redux\";\nimport FeatureProps from \"./FeatureProps\";\nimport { getFeatureProps } from \"./modules/selectors\";\nimport { changeFeatureProperty } from \"./modules/actions\";\n\nconst mapDispatchToProps = {\n  changeFeatureProperty\n};\n\nconst mapStateToProps = (state: any) => ({\n  list: getFeatureProps(state)\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FeatureProps);\n","import React, { Component } from \"react\";\nimport \"./styles.scss\";\n\ninterface Props {\n  addFeature(): void;\n  removeFeature(): void;\n  changeFeaturePosition(oldIndex: number, newIndex: number): void;\n  selectedFeatureStack: any;\n  selectedFeatureList: any;\n  isMoveDownEnabled: any;\n  isMoveUpEnabled: any;\n  selectedFeatureIndex: number;\n}\n\nclass FeatureButtons extends Component<Props> {\n  handleMove = (modifier: number) => (event: any) => {\n    const { selectedFeatureIndex, changeFeaturePosition } = this.props;\n    changeFeaturePosition(\n      selectedFeatureIndex,\n      selectedFeatureIndex - modifier\n    );\n  };\n  render() {\n    const {\n      addFeature,\n      removeFeature,\n      selectedFeatureStack,\n      selectedFeatureList,\n      isMoveDownEnabled,\n      isMoveUpEnabled\n    } = this.props;\n    return (\n      <div className=\"button-wrapper\">\n        {isMoveUpEnabled && (\n          <button onClick={this.handleMove(1)}>move Up</button>\n        )}\n        {selectedFeatureList && <button onClick={addFeature}>add</button>}\n        {selectedFeatureStack && (\n          <button onClick={removeFeature}>remove</button>\n        )}\n        {isMoveDownEnabled && (\n          <button onClick={this.handleMove(-1)}>move Down</button>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default FeatureButtons;\n","import { createSelector } from \"reselect\";\nimport {\n  getFeatures,\n  getSelectedFeatureIndex\n} from \"../../featureStack/modules/selectors\";\n\nexport const isMoveUpEnabled = createSelector(\n  getSelectedFeatureIndex,\n  index => index > 0\n);\n\nexport const isMoveDownEnabled = createSelector(\n  [getFeatures, getSelectedFeatureIndex],\n  (list: [], index: number) => index > -1 && index < list.length - 1\n);\n","import { connect } from \"react-redux\";\nimport FeatureButtons from \"./FeatureButtons\";\nimport {\n  getSelectedFeature,\n  getSelectedFeatureIndex\n} from \"../featureStack/modules/selectors\";\nimport { getSelectedFeature as getFeatureListSelected } from \"../featureList/modules/selectors\";\n\nimport { isMoveDownEnabled, isMoveUpEnabled } from \"./modules/selectors\";\n\nimport { addFeature, removeFeature } from \"../featureStack/modules/actions\";\nimport { changeFeaturePosition } from \"../featureStack/modules/actions\";\n\nconst mapDispatchToProps = {\n  addFeature,\n  removeFeature,\n  changeFeaturePosition\n};\n\nconst mapStateToProps = (state: any) => ({\n  selectedFeatureStack: getSelectedFeature(state),\n  selectedFeatureList: getFeatureListSelected(state),\n  isMoveDownEnabled: isMoveDownEnabled(state),\n  isMoveUpEnabled: isMoveUpEnabled(state),\n  selectedFeatureIndex: getSelectedFeatureIndex(state)\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FeatureButtons);\n","import React, { Component } from \"react\";\nimport { FeatureStack as FeatureStackModel } from \"../modules/models\";\nimport FeatureItem from \"../../uiComponents/item\";\nimport FeatureProps from \"../featureProps\";\nimport FeatureButtons from \"../featureButtons\";\nimport \"./styles.scss\";\n\ninterface Props {\n  setSelectedFeature(f: FeatureStackModel): void;\n  list: FeatureStackModel[];\n  selectedFeature: any;\n}\n\nclass FeatureStack extends Component<Props> {\n  setSelectedFeature = (feature: FeatureStackModel) => () => {\n    this.props.setSelectedFeature(feature);\n  };\n  render() {\n    const { list, selectedFeature } = this.props;\n    return (\n      <div className=\"feature-stack\">\n        <FeatureButtons />\n        <div className=\"feature-wrapper\">\n          <span className=\"section-label\">Step stack</span>\n          <div className=\"feature-stack-list\">\n            {list.map((f: FeatureStackModel) => (\n              <FeatureItem\n                key={f.uniqId}\n                onClick={this.setSelectedFeature(f)}\n                label={f.label}\n                selected={\n                  selectedFeature ? selectedFeature.uniqId === f.uniqId : false\n                }\n              />\n            ))}\n          </div>\n          <FeatureProps />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FeatureStack;\n","import { connect } from \"react-redux\";\nimport FeatureStack from \"./FeatureStack\";\nimport { State } from \"./modules/reducers\";\nimport {\n  getSelectedInstanceFeatures,\n  getSelectedFeature\n} from \"./modules/selectors\";\n\nimport {\n  addFeature,\n  removeFeature,\n  setSelectedFeature\n} from \"./modules/actions\";\n\nconst mapDispatchToProps = {\n  addFeature,\n  removeFeature,\n  setSelectedFeature\n};\n\nconst mapStateToProps = (state: State) => ({\n  list: getSelectedInstanceFeatures(state),\n  selectedFeature: getSelectedFeature(state)\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FeatureStack);\n","import React from \"react\";\n\nimport FeatureList from \"./featureList\";\nimport FeatureStack from \"./featureStack\";\n\nimport \"./styles.scss\";\n\nconst Features = () => (\n  <div className=\"features\">\n    <div>\n      <span className=\"section-label\">Avaliable actions</span>\n      <FeatureList />\n    </div>\n    <div>\n      <FeatureStack />\n    </div>\n  </div>\n);\n\nexport default Features;\n","import React, { Component } from \"react\";\nimport get from \"lodash/get\";\nimport attempt from \"lodash/attempt\";\nimport isError from \"lodash/isError\";\nimport \"./styles.scss\";\n\nconst responseTypes = {\n  json: \"application/json\",\n  images: [ \"image/jpeg\",\"image/png\",\"image/bmp\",\"image/gif\"]\n};\n\ninterface Props {\n  url: string;\n}\n\nclass Preview extends Component<Props> {\n  state = {\n    url: \"\",\n    longUrl:\"\",\n    blob: null,\n    errorText: \"\"\n  };\n  static getDerivedStateFromProps(nextProps: any, prevState: any) {\n    if (nextProps.url !== prevState.url) {\n      return {\n        url: nextProps.url,\n        longUrl:nextProps.longUrl\n      };\n    }\n    return null;\n  }\n\n  componentDidUpdate(prevProps: any, prevState: any) {\n    if (prevState.url !== this.state.url) {\n      this.fetchImageData();\n    }\n  }\n\n  fetchImageData = async () => {\n    fetch(`${this.state.url}?format=1`) // ?format=1 for set Content-type: application/json\n      .then(response => response.blob())\n      .then(blob => {\n        this.setState({ blob });\n      });\n  };\n  onError = () => {};\n  onLoad = () => {};\n  renderPreviewImage = (blob: any) => {\n    const objectURL = URL.createObjectURL(blob);\n    return (\n      <img\n        src={objectURL}\n        alt=\"preview-result\"\n        onError={this.onError}\n        onLoad={this.onLoad}\n      />\n    );\n  };\n  setErrorText = (msg: string) => {\n    if (this.state.errorText !== msg) {\n      this.setState({\n        errorText: msg\n      });\n    }\n  };\n  renderErrorMessage = (blob: any) => {\n    const reader = new FileReader();\n    reader.onload = (data: any) => {\n      const objResponse = attempt(\n        (json: string) => JSON.parse(json),\n        get(data, \"target.result\")\n      );\n      if (isError(objResponse)) {\n        this.setErrorText(\"Unexpected error\");\n      } else {\n        this.setErrorText(get(objResponse, \"message\", \"Undefined error\"));\n      }\n    };\n    reader.readAsText(blob);\n    return <span className=\"error-message\">{this.state.errorText}</span>;\n  };\n  render() {\n    const { url,longUrl, blob } = this.state;\n    if (!url || !blob) {\n      return null;\n    }\n    const responseType = get(blob, \"type\");\n    let preview = null;\n    if (responseTypes.images.includes(responseType!)) {\n      preview = this.renderPreviewImage(blob);\n    }\n    if (responseType === responseTypes.json) {\n      preview = this.renderErrorMessage(blob);\n    }\n    return (\n      <div className=\"preview\">\n        <span className=\"section-label\">Live Preview</span>\n        {preview}\n        <br/>\n        Short:\n        {responseTypes.images.includes(responseType!) && (\n          <span className=\"url\"><a href={url}>{url}</a></span>\n        )}\n        <br/>\n        Long:\n        {responseTypes.images.includes(responseType!) && (\n          <span className=\"url\"><a href={longUrl}>{longUrl}</a></span>\n        )}\n        \n      </div>\n    );\n  }\n}\n\nexport default Preview;\n","import get from \"lodash/get\";\nimport { createSelector } from \"reselect\";\nimport { key } from \"./constants\";\nimport { getSelectedInstance } from \"../../instanceList/modules/selectors\";\n\nexport const getState = (state: any) => state[key];\n\nexport const getInstanceProps = createSelector(\n  [getState, getSelectedInstance],\n  (s, si) => {\n    return s[get(si, \"id\")] || {};\n  }\n);\n\nexport const getInstanceSourceAction = createSelector(\n  [getInstanceProps],\n  ip => {\n    return get(ip, \"sourceAction\", {});\n  }\n);\n","import { createSelector } from \"reselect\";\nimport { key } from \"./constants\";\n\nexport const getState = (state: any) => state[key];\n\nexport const getKs = createSelector(\n  getState,\n  s => s.ks\n);\n\nexport const getPartnerId = createSelector(\n  getState,\n  s => s.partnerId\n);\n","import { createSelector } from \"reselect\";\nimport { getState as featurePropsState } from \"../../features/featureProps/modules/selectors\";\nimport { getFeatures as featureStackList } from \"../../features/featureStack/modules/selectors\";\nimport { getState as getInstancePropsState } from \"../../instances/instanceProps/modules/selectors\";\nimport { getKs, getPartnerId } from \"../../appConfig/modules/selectors\";\nimport forEach from \"lodash/forEach\";\nimport isArray from \"lodash/isArray\";\nimport filter from \"lodash/filter\";\nimport isEmpty from \"lodash/isEmpty\"; \n\nconst baseApi = \"https://www.kaltura.com\";\nconst apiVersion = \"/api_v3\";\n\nconst getAliasOrName = (property: { alias: any; name: string }) => {\n  return isArray(property.alias)\n    ? property.alias[0]\n    : property.alias || property.name;\n};\n\nconst getValue = (property: { value?: any; defaultValue?: any; type?: any }) => {\n  if (property.value == property.defaultValue) { // eslint-disable-line\n    if (property.type === 'string') {\n      if (isEmpty(property.value)) {\n        return \"\";\n      } else {\n        return property.value;\n      }\n    }\n    return \"\";\n  }\n  return property.value;\n};\n\nexport const getServiceUrl = createSelector(\n  [getKs, getPartnerId],\n  (ks, partnerId) => {\n    return `${baseApi}${apiVersion}/service/thumbnail_thumbnail${ks ? `/ks/${ks}` : \"\"\n      }${partnerId ? `/p/${partnerId}` : \"\"}/action/transform/transformString`;\n  }\n);\n\nconst longAddPropertyToUrl = (props: []) => {\n\n  let url = \"\";\n  forEach(props, (property: any) => {\n    const value = getValue(property);\n    if (value) {\n      url = url + `_${property.name}-${value}`;\n    }\n  });\n  return url;\n};\n\nexport const makeLongUrl = createSelector(\n  [getServiceUrl, featureStackList, featurePropsState, getInstancePropsState],\n  (serviceUrl, fs, fp, ip) => {\n    let url = `${serviceUrl}/`;\n    let iteration = 0;\n    forEach(ip, (instance: any) => {\n      const sourceAction = instance.sourceAction;\n      if (isEmpty(instance.entryId)) {\n        return true;\n      }\n      url = url + `${iteration > 0 ? \"+\" : \"\"}id-${instance.entryId}`;\n      if (!isEmpty(sourceAction)) {\n        url = url + `,${sourceAction.name}`;\n        url = url + longAddPropertyToUrl(sourceAction.props);\n      }\n      const filteredFeatures = filter(fs, [\"instanceId\", instance.id]);\n      forEach(filteredFeatures, (feature: any) => {\n        url = url + `,${feature.name}`;\n        url = url + longAddPropertyToUrl(fp[feature.uniqId] || []);\n      });\n      iteration++;\n    });\n    return url;\n  }\n);\n\nconst addPropertyToUrl = (props: []) => {\n  let url = \"\";\n  forEach(props, (property: any) => {\n    const value = getValue(property);\n    if (value) {\n      url = url + `_${getAliasOrName(property)}-${value}`;\n    }\n  });\n  return url;\n};\n\nexport const makePreviewUrl = createSelector(\n  [getServiceUrl, featureStackList, featurePropsState, getInstancePropsState],\n  (serviceUrl, fs, fp, ip) => {\n    let url = `${serviceUrl}/`;\n    let iteration = 0;\n    forEach(ip, (instance: any) => {\n      const sourceAction = instance.sourceAction;\n      if (isEmpty(instance.entryId)) {\n        return true;\n      }\n      url = url + `${iteration > 0 ? \"+\" : \"\"}id-${instance.entryId}`;\n      if (!isEmpty(sourceAction)) {\n        url = url + `,${getAliasOrName(sourceAction)}`;\n        url = url + addPropertyToUrl(sourceAction.props);\n      }\n      const filteredFeatures = filter(fs, [\"instanceId\", instance.id]);\n      forEach(filteredFeatures, (feature: any) => {\n        url = url + `,${getAliasOrName(feature)}`;\n        url = url + addPropertyToUrl(fp[feature.uniqId] || []);\n      });\n      iteration++;\n    });\n    return url;\n  }\n);\n","import { connect } from \"react-redux\";\nimport Preview from \"./Preview\";\nimport { makePreviewUrl,makeLongUrl } from \"./modules/selectors\";\n\nconst mapStateToProps = (state: any) => ({\n  url: makePreviewUrl(state),\n  longUrl: makeLongUrl(state)\n});\n\nexport default connect(mapStateToProps)(Preview);\n","import React, { FC } from \"react\";\nimport isEmpty from \"lodash/isEmpty\";\nimport TextInput from \"../uiComponents/textInput\";\nimport \"./styles.scss\";\n\ninterface Props {\n  setKS: (val: string) => void;\n  setPartnerId: (val: string) => void;\n  ks: string;\n  partnerId: any;\n}\n\nconst AppConfig: FC<Props> = ({ setKS, ks, setPartnerId, partnerId }) => {\n  const isKsEmpty: boolean = isEmpty(ks);\n  return (\n    <div className=\"app-config\">\n      <span className=\"section-label\">App configuration</span>\n      <div className=\"section\">\n        <label>KS</label>\n        <TextInput onChange={setKS} type=\"string\" value={ks} />\n      </div>\n      <div className=\"section\">\n        <label>Partner Id</label>\n        <TextInput\n          onChange={setPartnerId}\n          type=\"int\"\n          value={partnerId}\n          required={isKsEmpty}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AppConfig;\n","import { connect } from \"react-redux\";\nimport AppConfig from \"./AppConfig\";\n\nimport { setKS, setPartnerId } from \"./modules/actions\";\nimport { getKs, getPartnerId } from \"./modules/selectors\";\n\nconst mapDispatchToProps = {\n  setKS,\n  setPartnerId\n};\n\nconst mapStateToProps = (state: any) => ({\n  ks: getKs(state),\n  partnerId: getPartnerId(state)\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AppConfig);\n","import constants from \"./constants\";\n\nexport const setKS = (ks: string) => {\n  return { type: constants.SET_KS, payload: ks };\n};\n\nexport const setPartnerId = (partnerId: string) => {\n  return { type: constants.SET_PARTNER_ID, payload: partnerId };\n};\n","import React, { Component } from \"react\";\nimport Instance from \"./modules/models\";\nimport InctanceItem from \"../../uiComponents/item\";\nimport \"./styles.scss\";\n\ninterface Props {\n  list: Instance[];\n  selectedInstance: Instance | null;\n  setSelectedInstance(f: Instance): void;\n}\n\nclass InstanceList extends Component<Props> {\n  setSelected = (f: Instance) => () => {\n    this.props.setSelectedInstance(f);\n  };\n  render() {\n    const { list, selectedInstance } = this.props;\n    return (\n      <div className=\"instance-list\">\n        {list.map((f: Instance, index: number) => (\n          <InctanceItem\n            key={f.id}\n            onClick={this.setSelected(f)}\n            selected={selectedInstance ? selectedInstance.id === f.id : false}\n            label={`Step #${index + 1}`}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default InstanceList;\n","import merge from \"lodash/merge\";\nimport map from \"lodash/map\";\nimport constants from \"./constants\";\nimport Instance from \"../../instanceList/modules/models\";\nimport {\n  getState as getInstancePropState,\n  getInstanceSourceAction\n} from \"../modules/selectors\";\nimport { getSelectedInstance } from \"../../instanceList/modules/selectors\";\n\nexport const changeInsnanceProperty = (propId: string, value: any) => (\n  dispatch: any,\n  getState: any\n) => {\n  const id = getSelectedInstance(getState()).id;\n  const instanceProps = {\n    ...getInstancePropState(getState())[id],\n    [propId]: value\n  };\n  dispatch({\n    type: constants.CHANGE_INSTANCE_PROPERTY,\n    payload: { id, instanceProps }\n  });\n};\n\nexport const changeInstanceSourceActionProps = (propId: string, value: any) => (\n  dispatch: any,\n  getState: any\n) => {\n  const currentSourceAction = getInstanceSourceAction(getState());\n  const sourceAction = {\n    ...currentSourceAction,\n    props: map(currentSourceAction.props, (p: any) =>\n      p.id === propId ? { ...p, value } : p\n    )\n  };\n  dispatch(changeInsnanceProperty(\"sourceAction\", sourceAction));\n};\n\nexport const setInstanceProperty = (instance: Instance) => (\n  dispatch: any,\n  getState: any\n) => {\n  const instanceProps = getInstancePropState(getState())[instance.id] || {};\n  dispatch({\n    type: constants.SET_INSTANCE_PROPERTY,\n    payload: {\n      props: merge(instance, instanceProps),\n      id: instance.id\n    }\n  });\n};\n\nexport const clearInstanceProperty = (instance: Instance) => {\n  return { type: constants.CLEAR_INSTANCE_PROPERTY, payload: instance };\n};\n","import get from \"lodash/get\";\nimport constants from \"./constants\";\nimport Instance from \"./models\";\nimport { generateRandom } from \"../../../../utils\";\nimport { getSelectedInstance } from \"./selectors\";\nimport {\n  setInstanceProperty,\n  clearInstanceProperty\n} from \"../../instanceProps/modules/actions\";\n\nconst sourceActions = require(\"./sourceActions.json\"); // eslint-disable-line\n\nconst instance: Instance = {\n  id: \"\",\n  entryId: \"\",\n  sourceAction: null,\n  props: sourceActions\n};\n\nexport const setSelectedInstance = (instance: Instance) => (\n  dispatch: any,\n  getState: any\n) => {\n  const selected = getSelectedInstance(getState());\n  if (get(selected, \"id\") !== instance.id) {\n    dispatch(setInstanceProperty(instance));\n    dispatch({ type: constants.SET_SELECTED_INSTANCE, payload: instance });\n  }\n};\n\nexport const clearSelectedInstance = () => {\n  return { type: constants.CLEAR_SELECTED_INSTANCE };\n};\n\nexport const addInstance = () => (dispatch: any) => {\n  const newInstance = { ...instance, id: generateRandom() };\n  dispatch({ type: constants.ADD_INSTANCE, payload: newInstance });\n  dispatch(setSelectedInstance(newInstance));\n};\n\nexport const removeInstance = () => (dispatch: any, getState: any) => {\n  const instance = getSelectedInstance(getState());\n  dispatch(clearInstanceProperty(instance));\n  dispatch(clearSelectedInstance());\n  dispatch({ type: constants.REMOVE_INSTANCE, payload: instance });\n};\n","import { connect } from \"react-redux\";\nimport InstanceList from \"./InstanceList\";\nimport { State } from \"./modules/reducers\";\nimport { getInstances, getSelectedInstance } from \"./modules/selectors\";\n\nimport { setSelectedInstance } from \"./modules/actions\";\n\nconst mapDispatchToProps = {\n  setSelectedInstance\n};\n\nconst mapStateToProps = (state: State) => ({\n  list: getInstances(state),\n  selectedInstance: getSelectedInstance(state)\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(InstanceList);\n","import React from \"react\";\nimport Instance from \"../instanceList/modules/models\";\nimport \"./styles.scss\";\n\ninterface Props {\n  addInstance(): void;\n  removeInstance(): void;\n  selectedInstance: Instance | null;\n}\n\nconst FeatureButtons = (props: Props) => (\n  <div className=\"instance-button-wrapper\">\n    <button onClick={props.addInstance}>add</button>\n    {props.selectedInstance && (\n      <button onClick={props.removeInstance}>remove</button>\n    )}\n  </div>\n);\n\nexport default FeatureButtons;\n","import { connect } from \"react-redux\";\nimport InstanceButtons from \"./InstanceButtons\";\nimport { getSelectedInstance } from \"../instanceList/modules/selectors\";\n\nimport { addInstance, removeInstance } from \"../instanceList/modules/actions\";\n\nconst mapDispatchToProps = {\n  addInstance,\n  removeInstance\n};\n\nconst mapStateToProps = (state: any) => ({\n  selectedInstance: getSelectedInstance(state)\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(InstanceButtons);\n","import React, { Component } from \"react\";\nimport get from \"lodash/get\";\nimport isArray from \"lodash/isArray\";\nimport isEmpty from \"lodash/isEmpty\";\nimport find from \"lodash/find\";\n\nimport Property from \"../../uiComponents/property\";\nimport TextInput from \"../../uiComponents/textInput\";\nimport Select from \"../../uiComponents/dropDown\";\nimport \"./styles.scss\";\n\ninterface Props {\n  instanceProps: {};\n  changeInsnanceProperty(propId: string, value: any): void;\n  changeInstanceSourceActionProps(propId: string, value: any): void;\n}\n\nclass InstanceProps extends Component<Props> {\n  componentDidUpdate() {\n    const { instanceProps } = this.props;\n    if (!get(instanceProps, \"sourceAction\")) {\n      const sourceActionList: [] = get(instanceProps, \"props\", []);\n      if (!isEmpty(sourceActionList)) {\n        this.handleInstanceSourceActionChange(\n          get(sourceActionList, \"[0].name\", \"\")\n        );\n      }\n    }\n  }\n  handleInstanceEntryIdChange = (value: string) => {\n    const { changeInsnanceProperty } = this.props;\n    changeInsnanceProperty(\"entryId\", value);\n  };\n  handleInstanceSourceActionChange = (value: string) => {\n    const { changeInsnanceProperty, instanceProps } = this.props;\n    const sourceActionList: [] = get(instanceProps, \"props\", []);\n    const sourceAction = find(sourceActionList, [\"name\", value]);\n    changeInsnanceProperty(\"sourceAction\", sourceAction);\n  };\n  renderSourceActionSelect = () => {\n    const { instanceProps } = this.props;\n    const sourceActionList: [] = get(instanceProps, \"props\", []);\n    if (isArray(sourceActionList)) {\n      const options = sourceActionList.map((el: any) =>\n        get(el, \"name\", \"name isn't provided\")\n      );\n      return (\n        <div className=\"property\">\n          <span className=\"property-label\">Source action</span>\n          <Select\n            value={get(instanceProps, \"sourceAction.name\", \"\")}\n            onChange={this.handleInstanceSourceActionChange}\n            required\n            options={[...options]}\n          />\n        </div>\n      );\n    }\n    return null;\n  };\n  renderSourceActionProps = () => {\n    const { instanceProps, changeInstanceSourceActionProps } = this.props;\n    const sourceActionProps: [] = get(instanceProps, \"sourceAction.props\", []);\n    return sourceActionProps.map((p: any) => (\n      <div key={p.id}>\n        <Property onChange={changeInstanceSourceActionProps} {...p} />\n      </div>\n    ));\n  };\n  render() {\n    const { instanceProps } = this.props;\n    if (isEmpty(get(instanceProps, \"props\", []))) {\n      return null;\n    }\n    return (\n      <div className=\"instance-properties\">\n        <div className=\"property\">\n          <span className=\"property-label\">Entry Id</span>\n          <TextInput\n            value={get(instanceProps, \"entryId\", \"\")}\n            onChange={this.handleInstanceEntryIdChange}\n            required\n            type=\"string\"\n          />\n        </div>\n        {this.renderSourceActionSelect()}\n        {this.renderSourceActionProps()}\n      </div>\n    );\n  }\n}\n\nexport default InstanceProps;\n","import { connect } from \"react-redux\";\nimport InstanceProps from \"./InstanceProps\";\nimport { getInstanceProps } from \"./modules/selectors\";\n\nimport {\n  changeInsnanceProperty,\n  changeInstanceSourceActionProps\n} from \"./modules/actions\";\n\nconst mapDispatchToProps = {\n  changeInsnanceProperty,\n  changeInstanceSourceActionProps\n};\n\nconst mapStateToProps = (state: any) => ({\n  instanceProps: getInstanceProps(state)\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(InstanceProps);\n","import React from \"react\";\n\nimport InstanceList from \"./instanceList\";\nimport InstanceButtons from \"./instanceButtons\";\nimport InstanceProps from \"./instanceProps\";\n\nimport \"./styles.scss\";\n\nconst Instances = () => (\n  <div className=\"instances\">\n    <div>\n      <span className=\"section-label\">Transformation steps</span>\n      <InstanceButtons />\n      <InstanceList />\n    </div>\n    <div>\n      <InstanceProps />\n    </div>\n  </div>\n);\n\nexport default Instances;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport \"./styles.scss\";\nimport store from \"./store\";\n\nimport Features from \"./components/features\";\nimport Preview from \"./components/preview\";\nimport AppConfig from \"./components/appConfig\";\nimport Instances from \"./components/instances\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"main\">\n        <AppConfig />\n        <div className=\"feature-container\">\n          <Instances />\n          <Features />\n          <Preview />\n        </div>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./utils/serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}